REPOSITORY_URL = 'https://github.com/Praqma/Praqmatic-Automated-Changelog.git'
MAIN_BRANCH = 'master'
REMOTE_NAME = 'origin'
JOB_LABELS = 'dockerhost1'
AUTOMATION_USER = 'ReleasePraqma'
NUM_OF_BUILDS_TO_KEEP = 100
GITHUB_PRAQMA_CREDENTIALS = '100247a2-70f4-4a4e-a9f6-266d139da9db'

PRETESTED_INTEGRATION_JOB_NAME = '1_pretested-integration_pac'
GENERATE_CHANGE_LOG_JOB_NAME = '2_generate_changelog_pac'
FUNCTIONAL_TEST_JOB_NAME = '3_functional_test_pac'
RELEASE_JOB_NAME = '4_release_pac'

DOCKER_REPO_NAME = 'praqma/pac'

job(PRETESTED_INTEGRATION_JOB_NAME) {
    logRotator {
        numToKeep(NUM_OF_BUILDS_TO_KEEP)
    }

    label(JOB_LABELS)

    properties {
        ownership {
            primaryOwnerId('and')
            coOwnerIds('man')
        }
    }

    authorization {
        permission('hudson.model.Item.Read', 'anonymous')
    }

    scm {
        git {
            remote {
                name(REMOTE_NAME)
                url(REPOSITORY_URL)
                credentials(GITHUB_PRAQMA_CREDENTIALS)
            }
            branch("$REMOTE_NAME/ready/**")

            extensions {
                wipeOutWorkspace()
            }
        }
    }

    triggers {
        githubPush()
    }

    //First step: Can we build the docker image, and can we run unit tests?
    //This basically mimics developer behaviour
    steps {
        shell('''docker build -t praqma/pac:snapshot .
                 |docker run --entrypoint=/bin/sh --rm -v $(pwd):/data praqma/pac:snapshot -c rake test'''.stripMargin())
    }

    wrappers {
        buildName('${BUILD_NUMBER}#${GIT_REVISION,length=8}(${GIT_BRANCH})')
        pretestedIntegration("SQUASHED", MAIN_BRANCH, REMOTE_NAME)
    }

    publishers {
        pretestedIntegration()
        downstream(GENERATE_CHANGE_LOG_JOB_NAME, 'SUCCESS')
        mailer('and@praqma.net', false, false)
    }

}

job(GENERATE_CHANGE_LOG_JOB_NAME) {

    label(JOB_LABELS)

    scm {
        git {
            remote {
                name(REMOTE_NAME)
                url(REPOSITORY_URL)
            }
            branch(MAIN_BRANCH)
            extensions {}
        }
    }

    //We inject the globally defined passwords. 
    //The shell step require a password. We inject this password from our global configuration in a variable 'secret_password_pac'. This can be configured if you wish to
    //use a different method to provide the password. The password for this is our GitHub read-access token. 
    //We use configure because passwordwrapper for job-dsl is bugged
    configure { project ->
        project / buildWrappers / EnvInjectPasswordWrapper {
            injectGlobalPasswords(true)
            maskPasswordParameters(true)          
        }
    }

    steps {
        shell('docker run --rm -v $(pwd):/data praqma/pac:snapshot from-latest-tag "*" --settings=/data/pac_settings.yml -c '+AUTOMATION_USER+' $secret_password_pac jira')
    }

    publishers {
        archiveArtifacts {
            pattern('default-generated.*')
        }
        publishHtml {
            report('.') {
                reportName("Autogenerated changelog")
                reportFiles('default-generated.html')
            }

        }
        downstream(FUNCTIONAL_TEST_JOB_NAME, 'SUCCESS')
        mailer('and@praqma.net', false, false)
    }

}

job(FUNCTIONAL_TEST_JOB_NAME) {
    logRotator {
        numToKeep(NUM_OF_BUILDS_TO_KEEP)
    }

    label(JOB_LABELS)

    properties {
        ownership {
            primaryOwnerId('and')
            coOwnerIds('man')
        }
    }

    authorization {
        permission('hudson.model.Item.Read', 'anonymous')
    }

    scm {
        git {
            remote {
                name(REMOTE_NAME)
                url(REPOSITORY_URL)
            }
            branch(MAIN_BRANCH)
            extensions {}
        }
    }

    //This is a workaround until we get docker inside docker to run our functional test
    steps {
        shell('''#!/bin/bash
                 |. ~/.profile
                 |rake functional_test'''.stripMargin())
    }

    wrappers {
        buildName('${BUILD_NUMBER}#${GIT_REVISION,length=8}(${GIT_BRANCH})')
    }

    publishers {
        buildPipelineTrigger(RELEASE_JOB_NAME) {
            parameters {
                gitRevision()
            }
        }
        mailer('and@praqma.net', false, false)
    }
}

job(RELEASE_JOB_NAME) {
    label(JOB_LABELS)

    properties {
        ownership {
            primaryOwnerId('and')
            coOwnerIds('man')
        }
    }

    authorization {
        permission('hudson.model.Item.Read', 'anonymous')
    }

    scm {
        git {
            remote {
                name(REMOTE_NAME)
                url(REPOSITORY_URL)
                credentials(GITHUB_PRAQMA_CREDENTIALS)
            }
            branch(MAIN_BRANCH)
            extensions {}
        }
    }

    wrappers {
        buildName('${BUILD_NUMBER}#${GIT_REVISION,length=8}(${GIT_BRANCH})-ver=${ENV,var="VERSION"}')

        environmentVariables {
            propertiesFile('./version.properties')
            env('VERSION', '$ver-$BUILD_NUMBER')
        }
    }

    steps {
      systemGroovyCommand('''
import hudson.model.*

def env = build.getEnvironment()
def gitCommit = env['GIT_COMMIT']
def shortGitCommit = gitCommit[0..6]

def pa = new ParametersAction([
  new StringParameterValue("SHORT_GIT_COMMIT", shortGitCommit)
])

build.addAction(pa)
      ''')
      
      shell('echo "$VERSION ($SHORT_GIT_COMMIT)" > version.stamp')

      dockerBuildAndPublish {
        repositoryName(DOCKER_REPO_NAME)
        tag('${VERSION}')
        registryCredentials('docker-hub-crendential')
        dockerHostURI('unix:///var/run/docker.sock')
        forcePull(false)
	forceTag(false)
        createFingerprints(false)
        skipDecorate()
      }
    }    

    publishers {
        git {
            pushOnlyIfSuccess()
            tag(REMOTE_NAME, '$VERSION') {
                message('')
                create()
            }

            mailer('and@praqma.net', false, false)
        }
    }
}
